#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const ts_morph_1 = require("ts-morph");
const logger_1 = require("./logger");
const js_to_ts_converter_1 = require("./js-to-ts-converter");
const ArgumentParser = require('argparse').ArgumentParser;
const parser = new ArgumentParser({
    version: require('../package.json').version,
    addHelp: true,
    description: 'JS -> TS Converter'
});
parser.addArgument('directory', {
    help: 'The directory of .js files to convert'
});
parser.addArgument('--indentation-text', {
    help: 'How you would like new code to be indented',
    choices: ['tab', 'twospaces', 'fourspaces', 'eightspaces'],
    defaultValue: 'tab'
});
parser.addArgument('--include', {
    help: 'Glob patterns to include in the conversion. Separate multiple patterns ' +
        'with a comma. The patterns must be valid for the "glob-all" npm ' +
        'package (https://www.npmjs.com/package/glob-all), and are relative to ' +
        'the input directory.\n' +
        'Example: --include="**/myFolder/**,**/*.js"'
});
parser.addArgument('--exclude', {
    help: 'Glob patterns to exclude from being converted. Separate multiple patterns ' +
        'with a comma. The patterns must be valid for the "glob-all" npm ' +
        'package (https://www.npmjs.com/package/glob-all), and are relative to ' +
        'the input directory.\n' +
        'Example: --exclude="**/myFolder/**,**/*.jsx"'
});
parser.addArgument('--log-level', {
    help: `
		The level of logs to print to the console. From highest amount of \
		logging to lowest amount of logging: '${logger_1.logLevels.join("', '")}' 
		Defaults to verbose to tell you what's going on, as the script may take
		a long time to complete when looking up usages of functions. Use 'debug'
		to enable even more logging.
	`.trim().replace(/^\t*/gm, ''),
    choices: logger_1.logLevels,
    defaultValue: 'verbose'
});
const args = parser.parseArgs();
const absolutePath = path.resolve(args.directory.replace(/\/$/, '')); // remove any trailing slash
if (!fs.lstatSync(absolutePath).isDirectory()) {
    logger_1.default.error(`${absolutePath} is not a directory. Please provide a directory`);
    process.exit(1);
}
else {
    logger_1.default.info(`Processing directory: '${absolutePath}'`);
}
js_to_ts_converter_1.convertJsToTsSync(absolutePath, {
    indentationText: resolveIndentationText(args.indentation_text),
    logLevel: resolveLogLevel(args.log_level),
    includePatterns: parseIncludePatterns(args.include),
    excludePatterns: parseExcludePatterns(args.exclude)
});
/**
 * Private helper to resolve the correct IndentationText enum from the CLI
 * 'indentation' argument.
 */
function resolveIndentationText(indentationText) {
    switch (indentationText) {
        case 'tab': return ts_morph_1.IndentationText.Tab;
        case 'twospaces': return ts_morph_1.IndentationText.TwoSpaces;
        case 'fourspaces': return ts_morph_1.IndentationText.FourSpaces;
        case 'eightspaces': return ts_morph_1.IndentationText.EightSpaces;
        default: return ts_morph_1.IndentationText.Tab;
    }
}
function resolveLogLevel(logLevelStr) {
    if (!logger_1.logLevels.includes(logLevelStr)) {
        throw new Error(`
			Unknown --log-level argument '${logLevelStr}'
			Must be one of: '${logger_1.logLevels.join("', '")}'
		`.trim().replace(/\t*/gm, ''));
    }
    return logLevelStr;
}
function parseIncludePatterns(includePatterns) {
    if (!includePatterns) {
        return undefined;
    } // return undefined to use the default
    return includePatterns.split(',');
}
function parseExcludePatterns(excludePatterns) {
    if (!excludePatterns) {
        return [];
    }
    return excludePatterns.split(',');
}
//# sourceMappingURL=data:application/json;base64,