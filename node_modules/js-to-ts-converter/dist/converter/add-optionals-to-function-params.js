"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_morph_1 = require("ts-morph");
const logger_1 = require("../logger/logger");
/**
 * Adds the question token to function/method/constructor parameters that are
 * deemed to be optional based on the calls to that function/method/constructor
 * in the codebase.
 *
 * For example, if we have:
 *
 *     function myFn( arg1, arg2, arg3 ) {
 *         // ...
 *     }
 *
 *     myFn( 1, 2, 3 );  // all 3 args provided
 *     myFn( 1, 2 );     // <-- a call site only provides two arguments
 *
 * Then the resulting TypeScript function will be:
 *
 *     function myFn( arg1, arg2, arg3? ) {   // <-- arg3 marked as optional
 *         // ...
 *     }
 *
 * Note: Just calling the language service to look up references takes a lot of
 * time. Might have to optimize this somehow in the future.
 */
function addOptionalsToFunctionParams(tsAstProject) {
    logger_1.default.verbose('Beginning routine to mark function parameters as optional when calls exist that supply fewer args than parameters...');
    const sourceFiles = tsAstProject.getSourceFiles();
    logger_1.default.verbose('Parsing function/method/constructor calls from codebase.');
    const constructorMinArgsMap = parseClassConstructorCalls(sourceFiles);
    const functionsMinArgsMap = parseFunctionAndMethodCalls(sourceFiles);
    logger_1.default.verbose('Marking parameters as optional');
    addOptionals(constructorMinArgsMap);
    addOptionals(functionsMinArgsMap);
    return tsAstProject;
}
exports.addOptionalsToFunctionParams = addOptionalsToFunctionParams;
/**
 * Finds the call sites of each ClassDeclaration's constructor in order to
 * determine if any of its parameters should be marked as optional.
 *
 * Returns a Map keyed by ClassDeclaration which contains the minimum number of
 * arguments passed to that class's constructor.
 *
 * Actually marking the parameters as optional is done in a separate phase.
 */
function parseClassConstructorCalls(sourceFiles) {
    logger_1.default.verbose('Finding all calls to class constructors...');
    const constructorMinArgsMap = new Map();
    sourceFiles.forEach((sourceFile) => {
        logger_1.default.verbose(`  Processing classes in source file: ${sourceFile.getFilePath()}`);
        const classes = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.ClassDeclaration);
        classes.forEach((classDeclaration) => {
            const constructorFns = classDeclaration.getConstructors() || [];
            const constructorFn = constructorFns.length > 0 ? constructorFns[0] : undefined; // only grab the first since we're converting JavaScript
            // If there is no constructor function for this class, then nothing to do
            if (!constructorFn) {
                return;
            }
            logger_1.default.verbose(`    Looking for calls to the constructor of class: '${classDeclaration.getName()}'`);
            const constructorFnParams = constructorFn.getParameters();
            const numParams = constructorFnParams.length;
            const referencedNodes = classDeclaration.findReferencesAsNodes();
            const callsToConstructor = referencedNodes
                .map((node) => node.getFirstAncestorByKind(ts_morph_1.SyntaxKind.NewExpression))
                .filter((node) => !!node);
            logger_1.default.debug(`    Found ${callsToConstructor.length} call(s) to the constructor`);
            const minNumberOfCallArgs = callsToConstructor
                .reduce((minCallArgs, call) => {
                return Math.min(minCallArgs, call.getArguments().length);
            }, numParams);
            if (callsToConstructor.length > 0) {
                logger_1.default.debug(`    Constructor currently expects ${numParams} params. Call(s) to the constructor supply a minimum of ${minNumberOfCallArgs} args.`);
            }
            constructorMinArgsMap.set(constructorFn, minNumberOfCallArgs);
        });
    });
    return constructorMinArgsMap;
}
/**
 * Finds the call sites of each FunctionDeclaration or MethodDeclaration in
 * order to determine if any of its parameters should be marked as optional.
 *
 * Returns a Map keyed by FunctionDeclaration or MethodDeclaration which contains
 * the minimum number of arguments passed to that function/method.
 *
 * Actually marking the parameters as optional is done in a separate phase.
 */
function parseFunctionAndMethodCalls(sourceFiles) {
    logger_1.default.verbose('Finding all calls to functions/methods...');
    const functionsMinArgsMap = new Map();
    sourceFiles.forEach((sourceFile) => {
        logger_1.default.verbose(`  Processing functions/methods in source file: ${sourceFile.getFilePath()}`);
        const fns = getFunctionsAndMethods(sourceFile);
        fns.forEach((fn) => {
            logger_1.default.verbose(`    Looking for calls to the function: '${fn.getName()}'`);
            const fnParams = fn.getParameters();
            const numParams = fnParams.length;
            const referencedNodes = fn.findReferencesAsNodes();
            const callsToFunction = referencedNodes
                .map((node) => node.getFirstAncestorByKind(ts_morph_1.SyntaxKind.CallExpression))
                .filter((node) => !!node);
            logger_1.default.debug(`    Found ${callsToFunction.length} call(s) to the function '${fn.getName()}'`);
            const minNumberOfCallArgs = callsToFunction
                .reduce((minCallArgs, call) => {
                return Math.min(minCallArgs, call.getArguments().length);
            }, numParams);
            if (callsToFunction.length > 0) {
                logger_1.default.debug(`    Function currently expects ${numParams} params. Call(s) to the function/method supply a minimum of ${minNumberOfCallArgs} args.`);
            }
            functionsMinArgsMap.set(fn, minNumberOfCallArgs);
        });
    });
    return functionsMinArgsMap;
}
/**
 * Retrieves all FunctionDeclarations and MethodDeclarations from the given
 * source file.
 */
function getFunctionsAndMethods(sourceFile) {
    return [].concat(sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.FunctionDeclaration), sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.MethodDeclaration));
}
/**
 * Marks parameters of class constructors / methods / functions as optional
 * based on the minimum number of arguments passed in at its call sites.
 *
 * Ex:
 *
 *     class SomeClass {
 *         constructor( arg1, arg2 ) {}
 *     }
 *     new SomeClass( 1 );  // no arg2
 *
 *     function myFn( arg1, arg2 ) {}
 *     myFn();  // no args
 *
 *
 * Output class and function:
 *
 *     class SomeClass {
 *         constructor( arg1, arg2? ) {}  // <-- arg2 marked as optional
 *     }
 *
 *     function myFn( arg1?, arg2? ) {}   // <-- arg1 and arg2 marked as optional
 */
function addOptionals(minArgsMap) {
    const fns = minArgsMap.keys();
    for (const fn of fns) {
        const fnParams = fn.getParameters();
        const numParams = fnParams.length;
        const minNumberOfCallArgs = minArgsMap.get(fn);
        // Mark all parameters greater than the minNumberOfCallArgs as
        // optional (if it's not a rest parameter or already has a default value)
        for (let i = minNumberOfCallArgs; i < numParams; i++) {
            const param = fnParams[i];
            if (!param.isRestParameter() && !param.hasInitializer()) {
                param.setHasQuestionToken(true);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,