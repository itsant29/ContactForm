"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const create_ts_ast_project_1 = require("./create-ts-ast-project");
const convert_1 = require("./converter/convert");
const logger_1 = require("./logger/logger");
/**
 * Asynchronously converts the JavaScript files under the given `sourceFilesPath`
 * to TypeScript files.
 *
 * @param sourceFilesPath The path to the source files to convert
 * @param [options]
 * @param [options.indentationText] The text used to indent new class property
 *   declarations.
 * @param [options.logLevel] The level of logging to show on the console.
 *   One of: 'debug', 'verbose', 'info', 'warn', 'error'
 * @param [options.includePatterns] Glob patterns to include files.
 * @param [options.excludePatterns] Glob patterns to exclude files.
 */
async function convertJsToTs(sourceFilesPath, options = {}) {
    const convertedTsAstProject = doConvert(sourceFilesPath, options);
    // Save output files
    return convertedTsAstProject.save();
}
exports.convertJsToTs = convertJsToTs;
/**
 * Synchronously converts the JavaScript files under the given `sourceFilesPath`
 * to TypeScript files.
 *
 * @param sourceFilesPath The path to the source files to convert
 * @param [options]
 * @param [options.indentationText] The text used to indent new class property
 *   declarations.
 * @param [options.logLevel] The level of logging to show on the console.
 *   One of: 'debug', 'verbose', 'info', 'warn', 'error'
 * @param [options.includePatterns] Glob patterns to include files.
 * @param [options.excludePatterns] Glob patterns to exclude files.
 */
function convertJsToTsSync(sourceFilesPath, options = {}) {
    const convertedTsAstProject = doConvert(sourceFilesPath, options);
    // Save output files
    convertedTsAstProject.saveSync();
}
exports.convertJsToTsSync = convertJsToTsSync;
/**
 * Performs the actual conversion given a `sourceFilesPath`, and returning a
 * `ts-morph` Project with the converted source files.
 *
 * @param sourceFilesPath The path to the source files to convert
 * @param [options]
 * @param [options.indentationText] The text used to indent new class property
 *   declarations.
 * @param [options.logLevel] The level of logging to show on the console.
 *   One of: 'debug', 'verbose', 'info', 'warn', 'error'
 * @param [options.includePatterns] Glob patterns to include files.
 * @param [options.excludePatterns] Glob patterns to exclude files.
 */
function doConvert(sourceFilesPath, options = {}) {
    logger_1.default.setLogLevel(options.logLevel || 'verbose');
    const absolutePath = path.resolve(sourceFilesPath);
    const tsAstProject = create_ts_ast_project_1.createTsAstProject(absolutePath, options);
    return convert_1.convert(tsAstProject);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMtdG8tdHMtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2pzLXRvLXRzLWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixtRUFBNkQ7QUFDN0QsaURBQThDO0FBRzlDLDRDQUFxQztBQVNyQzs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSSxLQUFLLHdCQUNYLGVBQXVCLEVBQ3ZCLFVBQWtDLEVBQUU7SUFFcEMsTUFBTSxxQkFBcUIsR0FBRyxTQUFTLENBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBRXBFLG9CQUFvQjtJQUNwQixPQUFPLHFCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3JDLENBQUM7QUFSRCxzQ0FRQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILDJCQUNDLGVBQXVCLEVBQ3ZCLFVBQWtDLEVBQUU7SUFFcEMsTUFBTSxxQkFBcUIsR0FBRyxTQUFTLENBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBRXBFLG9CQUFvQjtJQUNwQixxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNsQyxDQUFDO0FBUkQsOENBUUM7QUFHRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxtQkFDQyxlQUF1QixFQUN2QixVQUFrQyxFQUFFO0lBRXBDLGdCQUFNLENBQUMsV0FBVyxDQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFFLENBQUM7SUFFcEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBRSxlQUFlLENBQUUsQ0FBQztJQUVyRCxNQUFNLFlBQVksR0FBRywwQ0FBa0IsQ0FBRSxZQUFZLEVBQUUsT0FBTyxDQUFFLENBQUM7SUFDakUsT0FBTyxpQkFBTyxDQUFFLFlBQVksQ0FBRSxDQUFDO0FBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgY3JlYXRlVHNBc3RQcm9qZWN0IH0gZnJvbSBcIi4vY3JlYXRlLXRzLWFzdC1wcm9qZWN0XCI7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSBcIi4vY29udmVydGVyL2NvbnZlcnRcIjtcbmltcG9ydCB7IFByb2plY3QsIEluZGVudGF0aW9uVGV4dCB9IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9sb2dnZXJcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyL2xvZ2dlclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEpzVG9Uc0NvbnZlcnRlck9wdGlvbnMge1xuXHRpbmRlbnRhdGlvblRleHQ/OiBJbmRlbnRhdGlvblRleHQsXG5cdGxvZ0xldmVsPzogTG9nTGV2ZWwsXG5cdGluY2x1ZGVQYXR0ZXJucz86IHN0cmluZ1tdLFxuXHRleGNsdWRlUGF0dGVybnM/OiBzdHJpbmdbXVxufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IGNvbnZlcnRzIHRoZSBKYXZhU2NyaXB0IGZpbGVzIHVuZGVyIHRoZSBnaXZlbiBgc291cmNlRmlsZXNQYXRoYFxuICogdG8gVHlwZVNjcmlwdCBmaWxlcy5cbiAqXG4gKiBAcGFyYW0gc291cmNlRmlsZXNQYXRoIFRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgZmlsZXMgdG8gY29udmVydFxuICogQHBhcmFtIFtvcHRpb25zXVxuICogQHBhcmFtIFtvcHRpb25zLmluZGVudGF0aW9uVGV4dF0gVGhlIHRleHQgdXNlZCB0byBpbmRlbnQgbmV3IGNsYXNzIHByb3BlcnR5XG4gKiAgIGRlY2xhcmF0aW9ucy5cbiAqIEBwYXJhbSBbb3B0aW9ucy5sb2dMZXZlbF0gVGhlIGxldmVsIG9mIGxvZ2dpbmcgdG8gc2hvdyBvbiB0aGUgY29uc29sZS5cbiAqICAgT25lIG9mOiAnZGVidWcnLCAndmVyYm9zZScsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXG4gKiBAcGFyYW0gW29wdGlvbnMuaW5jbHVkZVBhdHRlcm5zXSBHbG9iIHBhdHRlcm5zIHRvIGluY2x1ZGUgZmlsZXMuXG4gKiBAcGFyYW0gW29wdGlvbnMuZXhjbHVkZVBhdHRlcm5zXSBHbG9iIHBhdHRlcm5zIHRvIGV4Y2x1ZGUgZmlsZXMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb252ZXJ0SnNUb1RzKFxuXHRzb3VyY2VGaWxlc1BhdGg6IHN0cmluZyxcblx0b3B0aW9uczogSnNUb1RzQ29udmVydGVyT3B0aW9ucyA9IHt9XG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgY29udmVydGVkVHNBc3RQcm9qZWN0ID0gZG9Db252ZXJ0KCBzb3VyY2VGaWxlc1BhdGgsIG9wdGlvbnMgKTtcblxuXHQvLyBTYXZlIG91dHB1dCBmaWxlc1xuXHRyZXR1cm4gY29udmVydGVkVHNBc3RQcm9qZWN0LnNhdmUoKTtcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IGNvbnZlcnRzIHRoZSBKYXZhU2NyaXB0IGZpbGVzIHVuZGVyIHRoZSBnaXZlbiBgc291cmNlRmlsZXNQYXRoYFxuICogdG8gVHlwZVNjcmlwdCBmaWxlcy5cbiAqXG4gKiBAcGFyYW0gc291cmNlRmlsZXNQYXRoIFRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgZmlsZXMgdG8gY29udmVydFxuICogQHBhcmFtIFtvcHRpb25zXVxuICogQHBhcmFtIFtvcHRpb25zLmluZGVudGF0aW9uVGV4dF0gVGhlIHRleHQgdXNlZCB0byBpbmRlbnQgbmV3IGNsYXNzIHByb3BlcnR5XG4gKiAgIGRlY2xhcmF0aW9ucy5cbiAqIEBwYXJhbSBbb3B0aW9ucy5sb2dMZXZlbF0gVGhlIGxldmVsIG9mIGxvZ2dpbmcgdG8gc2hvdyBvbiB0aGUgY29uc29sZS5cbiAqICAgT25lIG9mOiAnZGVidWcnLCAndmVyYm9zZScsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXG4gKiBAcGFyYW0gW29wdGlvbnMuaW5jbHVkZVBhdHRlcm5zXSBHbG9iIHBhdHRlcm5zIHRvIGluY2x1ZGUgZmlsZXMuXG4gKiBAcGFyYW0gW29wdGlvbnMuZXhjbHVkZVBhdHRlcm5zXSBHbG9iIHBhdHRlcm5zIHRvIGV4Y2x1ZGUgZmlsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0SnNUb1RzU3luYyhcblx0c291cmNlRmlsZXNQYXRoOiBzdHJpbmcsXG5cdG9wdGlvbnM6IEpzVG9Uc0NvbnZlcnRlck9wdGlvbnMgPSB7fVxuKSB7XG5cdGNvbnN0IGNvbnZlcnRlZFRzQXN0UHJvamVjdCA9IGRvQ29udmVydCggc291cmNlRmlsZXNQYXRoLCBvcHRpb25zICk7XG5cblx0Ly8gU2F2ZSBvdXRwdXQgZmlsZXNcblx0Y29udmVydGVkVHNBc3RQcm9qZWN0LnNhdmVTeW5jKCk7XG59XG5cblxuLyoqXG4gKiBQZXJmb3JtcyB0aGUgYWN0dWFsIGNvbnZlcnNpb24gZ2l2ZW4gYSBgc291cmNlRmlsZXNQYXRoYCwgYW5kIHJldHVybmluZyBhXG4gKiBgdHMtbW9ycGhgIFByb2plY3Qgd2l0aCB0aGUgY29udmVydGVkIHNvdXJjZSBmaWxlcy5cbiAqXG4gKiBAcGFyYW0gc291cmNlRmlsZXNQYXRoIFRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgZmlsZXMgdG8gY29udmVydFxuICogQHBhcmFtIFtvcHRpb25zXVxuICogQHBhcmFtIFtvcHRpb25zLmluZGVudGF0aW9uVGV4dF0gVGhlIHRleHQgdXNlZCB0byBpbmRlbnQgbmV3IGNsYXNzIHByb3BlcnR5XG4gKiAgIGRlY2xhcmF0aW9ucy5cbiAqIEBwYXJhbSBbb3B0aW9ucy5sb2dMZXZlbF0gVGhlIGxldmVsIG9mIGxvZ2dpbmcgdG8gc2hvdyBvbiB0aGUgY29uc29sZS5cbiAqICAgT25lIG9mOiAnZGVidWcnLCAndmVyYm9zZScsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXG4gKiBAcGFyYW0gW29wdGlvbnMuaW5jbHVkZVBhdHRlcm5zXSBHbG9iIHBhdHRlcm5zIHRvIGluY2x1ZGUgZmlsZXMuXG4gKiBAcGFyYW0gW29wdGlvbnMuZXhjbHVkZVBhdHRlcm5zXSBHbG9iIHBhdHRlcm5zIHRvIGV4Y2x1ZGUgZmlsZXMuXG4gKi9cbmZ1bmN0aW9uIGRvQ29udmVydChcblx0c291cmNlRmlsZXNQYXRoOiBzdHJpbmcsXG5cdG9wdGlvbnM6IEpzVG9Uc0NvbnZlcnRlck9wdGlvbnMgPSB7fVxuKTogUHJvamVjdCB7XG5cdGxvZ2dlci5zZXRMb2dMZXZlbCggb3B0aW9ucy5sb2dMZXZlbCB8fCAndmVyYm9zZScgKTtcblxuXHRjb25zdCBhYnNvbHV0ZVBhdGggPSBwYXRoLnJlc29sdmUoIHNvdXJjZUZpbGVzUGF0aCApO1xuXG5cdGNvbnN0IHRzQXN0UHJvamVjdCA9IGNyZWF0ZVRzQXN0UHJvamVjdCggYWJzb2x1dGVQYXRoLCBvcHRpb25zICk7XG5cdHJldHVybiBjb252ZXJ0KCB0c0FzdFByb2plY3QgKTtcbn0iXX0=